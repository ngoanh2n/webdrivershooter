/**
 * Author: ngoanh2n
 */
getTasks().register("sourcesJar", Jar) {
    from(sourceSets.main.allJava)
    archiveClassifier.set("sources")
}

getTasks().register("javadocJar", Jar) {
    from(javadoc)
    archiveClassifier.set("javadoc")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = getProject().getName()
            from getComponents().java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = property("artifact.name")
                description = property("artifact.desc")
                url = "https://github.com/ngoanh2n/webdrivershooter"

                licenses {
                    license {
                        name = "MIT"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                developers {
                    developer {
                        id = "ngoanh2n"
                        name = "ngoanh2n"
                        email = "ngoanh2n@gmail.com"
                        organizationUrl = "https://github.com/ngoanh2n"
                    }
                }
                scm {
                    url = "https://github.com/ngoanh2n/webdrivershooter"
                    connection = "scm:git:git://github.com/ngoanh2n/webdrivershooter.git"
                    developerConnection = "scm:git:ssh://github.com/ngoanh2n/webdrivershooter.git"
                }
            }
        }
    }
    if (getProject().hasProperty("signing.keyId")) {
        repositories {
            maven {
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                setUrl(getProject().getVersion().toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl)

                credentials {
                    username = "${sonatypeUsername}"
                    password = "${sonatypePassword}"
                }
            }
        }
    }
}

if (getProject().hasProperty("signing.keyId")) {
    signing {
        sign publishing.publications.mavenJava
    }
}
